########################################################################################################################
#                                                                                                                      #
# Model of the Services software.                                                                                        #
#                                                                                                                      #
########################################################################################################################


!IMPORT models/in/mercator/mtcs_common.yaml:
!IMPORT models/in/mercator/mtcs_tmc.yaml:


########################################################################################################################
# Define the containing PLC library
########################################################################################################################

!LIBRARY mtcs_services:


  ########################################################################################################################
  # ServicesTimingTimeSource
  ########################################################################################################################
  
  !ENUMERATION ServicesTimingTimeSource:
      items:
          [ "LOCAL_CLOCK",
            "PTP_IEEE_1588" ]
  
  
  ########################################################################################################################
  # ServicesTimingConfig
  ########################################################################################################################
  
  !CONFIG ServicesTimingConfig:
      items:
          leapSeconds:
              type: t_int16
              comment: "Number of leap seconds, so that UTC = TAI + this value. See ftp://maia.usno.navy.mil/ser7/tai-utc.dat for the latest number."
          dut:
              type: t_double
              comment: "Delta UT (= UT1 - UTC). Put to 0.0 to ignore."
          alwaysUseLocalClock:
              type: t_bool
              comment: "If TRUE, then the local clock (source=LOCAL_CLOCK) will be used even if an external (more accurate!) clock is available"
          ignoreSerialError:
              type: t_bool
              comment: "Don't show the Servicestiming status as ERROR in case the serial link fails"
  
  
  ########################################################################################################################
  # ServicesMeteoConfig
  ########################################################################################################################
  
  !CONFIG ServicesMeteoConfig:
      items:
          enableWeatherMonitoring:
              type: t_bool
              comment: "Enable weather monitoring and emergency closing"
          wetLimit:
              type: t_double
              comment: "Wet if (rainIntensity+hailIntrelaensity)>wetLimit"
          windSpeedMinimum:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind speed minimum"
              expand: false
          windSpeedAverage:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind speed average"
              expand: false
          windSpeedMaximum:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind speed maximum"
              expand: false
          windDirectionMinimum:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind direction minimum"
              expand: false
          windDirectionAverage:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind direction average"
              expand: false
          windDirectionMaximum:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the wind direction maximum"
              expand: false
          airPressure:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the air pressure"
              expand: false
          airTemperature:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the air temperature"
              expand: false
          internalTemperature:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the internal temperature"
              expand: false
          relativeHumidity:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the relative humidity"
              expand: false
          rainAccumulation:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the rain accumulation"
              expand: false
          rainDuration:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the rain duration"
              expand: false
          rainIntensity:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the rain intensity"
              expand: false
          rainPeakIntensity:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the rain peak intensity"
              expand: false
          hailAccumulation:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the hail accumulation"
              expand: false
          hailDuration:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the hail duration"
              expand: false
          hailIntensity:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the hail intensity"
              expand: false
          hailPeakIntensity:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the hail peak intensity"
              expand: false
          heatingTemperature:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the heating temperature"
              expand: false
          heatingVoltage:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the heating voltage"
              expand: false
          supplyVoltage:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the supply voltage"
              expand: false
          referenceVoltage:
              type: mtcs_common.MeasurementConfig
              comment: "Config for the 3.5 V reference voltage"
              expand: false
  
  
  ########################################################################################################################
  # ServicesWestTemperatureTimeConfig
  ########################################################################################################################
  
  !CONFIG ServicesWestTemperatureTimeConfig:
      items:
          enable:
              type: t_bool
              comment: "Enable this time (TRUE) or not (FALSE)"
          hour:
              type: t_double
              comment: "The time to change the setpoint, as decimal hour (e.g. 9.5 = 9:30 am)"
          offset:
              type: t_double
              comment: "Setpoint = air temperature of meteo station + this offset (in degrees celsius)"
  
  
  ########################################################################################################################
  # ServicesWestTemperatureUpdateConfig
  ########################################################################################################################
  
  !CONFIG ServicesWestTemperatureUpdateConfig:
      items:
          time0: { type: ServicesWestTemperatureTimeConfig, comment: "Time config 0" }
          time1: { type: ServicesWestTemperatureTimeConfig, comment: "Time config 1" }
          time2: { type: ServicesWestTemperatureTimeConfig, comment: "Time config 2" }
          time3: { type: ServicesWestTemperatureTimeConfig, comment: "Time config 3" }
          time4: { type: ServicesWestTemperatureTimeConfig, comment: "Time config 4" }
  
  
  ########################################################################################################################
  # ServicesWestParametersAddressesConfig
  ########################################################################################################################
  
  !CONFIG ServicesWestParametersAddressesConfig:
      comment: "Config about Modbus parameters addresses"  
      items:
          #Bit parameters addresses
          communicationWriteStatus:     { type: t_uint16, initial: !UINT16 1, comment: "Communication Write Status" }
          manualControl:                { type: t_uint16, initial: !UINT16 2, comment: "Manual control" }
          selfTune:                     { type: t_uint16, initial: !UINT16 3, comment: "Activate SelfTune" }
          preTune:                      { type: t_uint16, initial: !UINT16 4, comment: "Activate PreTune" }
          alarm1Status:                 { type: t_uint16, initial: !UINT16 5, comment: "Alarm 1 status" }
          alarm2Status:                 { type: t_uint16, initial: !UINT16 6, comment: "Alarm 2 status" }
          setpointRampling:             { type: t_uint16, initial: !UINT16 7, comment: "Setpoint ramping" }
          loopAlarmStatus:              { type: t_uint16, initial: !UINT16 10, comment: "Loop alarm status" }
          loopAlarm:                    { type: t_uint16, initial: !UINT16 12, comment: "Loop alarm" }
          digitalInput2:                { type: t_uint16, initial: !UINT16 13, comment: "State Option B digital input" }
          #Word parameters addresses
          processVariable:              { type: t_uint16, initial: !UINT16 1, comment: "Process Variable" }
          setpoint:                     { type: t_uint16, initial: !UINT16 2, comment: "Setpoint" }
          outputPower:                  { type: t_uint16, initial: !UINT16 3, comment: "Power percentage" }
          desviation:                   { type: t_uint16, initial: !UINT16 4, comment: "Difference ProcessVariable and Setpoint" }
          primaryProportionalBand:      { type: t_uint16, initial: !UINT16 6, comment: "Primary Proportional band PB" }
          directActing:                 { type: t_uint16, initial: !UINT16 7, comment: "Direct reverse acting" }
          resetTime:                    { type: t_uint16, initial: !UINT16 8, comment: "Reset Time. Integral time constant" }
          rate:                         { type: t_uint16, initial: !UINT16 9, comment: "Rate. Derivative time constant" }
          output1ClycleTime:            { type: t_uint16, initial: !UINT16 10, comment: "Output 1 cycle time in seconds" }
          scaleRangeLowerLimit:         { type: t_uint16, initial: !UINT16 11, comment: "Lower Limit of input range" }
          scaleRangeUpperLimit:         { type: t_uint16, initial: !UINT16 12, comment: "Upper Limit of input range" }
          alarm1Value:                  { type: t_uint16, initial: !UINT16 13, comment: "Alarm 1 active at this level" }
          alarm2Value:                  { type: t_uint16, initial: !UINT16 14, comment: "Alarm 2 active at this level" }
          manualReset:                  { type: t_uint16, initial: !UINT16 15, comment: "Bias value in percentage" }
          deadbandOverlap:              { type: t_uint16, initial: !UINT16 16, comment: "Deadband and Overlap percentage" }
          onOffDiferential:             { type: t_uint16, initial: !UINT16 17, comment: "Input span for ON/OFF differential" }
          decimalPointPosition:         { type: t_uint16, initial: !UINT16 18, comment: "Decimal point position" }
          output2ClycleTime:            { type: t_uint16, initial: !UINT16 19, comment: "Output 2 cycle time in seconds" }
          primaryOutputPowerLimit:      { type: t_uint16, initial: !UINT16 20, comment: "Safety power limit in porcentage" }
          actualSetpoint:               { type: t_uint16, initial: !UINT16 21, comment: "Current Setpoint value (ramping)" }
          setpointUpperLimit:           { type: t_uint16, initial: !UINT16 22, comment: "Setpoint upper limit" }
          setpointLowerLimit:           { type: t_uint16, initial: !UINT16 23, comment: "Setpoint lower limit" }
          setpointRampRate:             { type: t_uint16, initial: !UINT16 24, comment: "Setpoint ramp rate" }
          inputFilterTimeContant:       { type: t_uint16, initial: !UINT16 25, comment: "Input Filter time contant" }
          processValueOffset:           { type: t_uint16, initial: !UINT16 26, comment: "Process Value offset" }
          alarm1Hysteresis:             { type: t_uint16, initial: !UINT16 32, comment: "Alarm 1 hysteresis in percentage" }
          alarm2Hysteresis:             { type: t_uint16, initial: !UINT16 33, comment: "Alarm 2 hysteresis in percentage" }
  
  
  ########################################################################################################################
  # ServicesWestControllerVariables
  ########################################################################################################################
  
  !CONFIG ServicesWestControllerVariables:
      comment: "Configuration parameters"  
      items:
          setpoint:
              type: t_double
              comment: "Setpoint"
          defaultSetpoint:
              type: t_double
              comment: "Default setpoint"
          minSetpoint: 
              type: t_double
              comment: "Minimun setpoint"
          maxSetpoint:
              type: t_double
              comment: "Maximal setpoint"
          processValueOffset:
              type: t_double
              comment: "Offset process varible"
          differentialOnOff:
              type: t_double
              comment: "On/Off differential"
          alarmValue:
              type: t_double
              comment: "Alarm value"
          inputFilterTimeConstant:
              type: t_double
              comment: "Input filter time constant"
          cycleTime:
              type: t_double
              comment: "Cycle time for control loop"                
          proportionalBand:
              type: t_uint16
              comment: "Proportional constant"
          resetTime:
              type: t_uint16
              comment: "Integral time constant"
          rate:
              type: t_uint16
              comment: "Dervative time constant"
  
  
  ########################################################################################################################
  # ServicesWestControllerConfig
  ########################################################################################################################
  
  !CONFIG ServicesWestControllerConfig:
      items:
          unitID:
              type: t_uint8
              comment: "The address or UnitID of the controller"
          update:
              type: t_bool
              comment: "True to automatically update the setpoint"
          warningMessage:
              type: t_string
              comment: "A warning message (empty = not shown)"
          measurement:
              type: mtcs_common.MeasurementConfig
              comment: "The measurement config"
          variables:
              type: ServicesWestControllerVariables
              comment: "Configuration parameters"
  
  
  ########################################################################################################################
  # ServicesWestConfig
  ########################################################################################################################
  
  !CONFIG ServicesWestConfig:
      items:
          updateProcessVariables:
              type: t_bool
              comment: "True to automatically update process variables"
          updateVariablesPollingInterval :
              type: t_double
              comment: "Time between bus reads in seconds"
          domeTempControl:
              type: t_bool
              comment: "True to automatically update dome temperatures"
          domeTempCycleTime :
              type: t_double
              comment: "Time between bus checks in seconds"
          hydraulicsTempControl:
              type: t_bool
              comment: "True to enable PID controller for hydraulics temperatures"
          hydraulicsTempCycleTime :
              type: t_double
              comment: "Cycle time for PID Controller in seconds"
          hydraulicsProportionalConstantKP :
              type: t_double
              comment: "Proportional constant (Kp) for PID Controller "
          hydraulicsIntegralConstantTn :
              type: t_double
              comment: "Integral constant (Tn) for PID Controller in seconds"
          domeTemperature:
              type: ServicesWestControllerConfig
              comment: "The address of the Dome temperature controller"
          firstFloorTemperature:
              type: ServicesWestControllerConfig
              comment: "The address of the first floor temperature controller"
          pumpsRoomTemperature:
              type: ServicesWestControllerConfig
              comment: "The address of the pumps room temperature controller"
          oilHeatExchangerTemperature:
              type: ServicesWestControllerConfig
              comment: "The address of the oil heat exchanger temperature controller"
          serversRoomTemperature:
              type: ServicesWestControllerConfig
              comment: "The address of the servers room temperature controller"
          parameterAddresses:
              type: ServicesWestParametersAddressesConfig
              comment: "Config about Modbus parameters addresses"
          temperatureUpdate:
              type: ServicesWestTemperatureUpdateConfig
              comment: "The config for the temperature setpoint"
  
  ########################################################################################################################
  # ServicesChillerControllerParameterAddress
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerParameterAddresses:
      comment: "Config about Modbus parameters addresses"  
      items:
          #Logical Area 1. Analog input. Read only. Words 16bits
          waterTankTemperature:     { type: t_uint16, initial: !UINT16 258, comment: "Water tank temperature" }
          highPressureCircuit1:     { type: t_uint16, initial: !UINT16 260, comment: "High pressure of circuit 1" }
          highPressureCircuit2:     { type: t_uint16, initial: !UINT16 262, comment: "High pressure of circuit 2" }
          chillerCurrentInput:      { type: t_uint16, initial: !UINT16 264, comment: "Chiller current input" }
          waterPumpCurrentInput:    { type: t_uint16, initial: !UINT16 266, comment: "Water pump current input" }        
          evaporatorOutTemp1:       { type: t_uint16, initial: !UINT16 268, comment: "Evaporator out temperature 1" }
          evaporatorOutTemp2:       { type: t_uint16, initial: !UINT16 270, comment: "Evaporator out temperature 2" }
          ambientTemperature:       { type: t_uint16, initial: !UINT16 272, comment: "Ambient temperature" }
          waterPumpChassisTemp:     { type: t_uint16, initial: !UINT16 274, comment: "Water Pump chassis temperature" }        
          #Logical Area 2. Digital input. Read only. Words 16bits
          digitalInputStatus1:      { type: t_uint16, initial: !UINT16 512, comment: "Flow switch status" }
          digitalInputStatus2:      { type: t_uint16, initial: !UINT16 513, comment: "Digital input status 2" }
          digitalInputStatus3:      { type: t_uint16, initial: !UINT16 514, comment: "Digital input status 3" }
          digitalInputStatus4:      { type: t_uint16, initial: !UINT16 515, comment: "Digital input status 4" }
          #Logical Area 3. Data. R/W. Words 16bits
          setpoint:                 { type: t_uint16, initial: !UINT16 768, comment: "Setpoint parameter address" }
          minSetpoint:              { type: t_uint16, initial: !UINT16 769, comment: "Minimal Setpoint parameter address" }
          maxSetpoint:              { type: t_uint16, initial: !UINT16 770, comment: "Maximal Setpoint parameter address" }
          trippingBand:             { type: t_uint16, initial: !UINT16 774, comment: "Tripping Band parameter address" }
          #Logical Area 4. Configuration. R/W. Words 16bits
          FanCondensingCircuits:    { type: t_uint16, initial: 959, comment: "Number of fan condensing circuits parameter address" }
          #Logical Area 5. Unit Status. R/W. Words 16bits
          unitStatus:               { type: t_uint16, initial: !UINT16 1280, comment: "Unit Status parameter address" }
          unitCircuitsStatus:       { type: t_uint16, initial: 1281, comment: "Unit Circuits status parameter address" }
          unitControllerReset:      { type: t_uint16, initial: 1282, comment: "Unit Controlelr reset parameter address" }
          #Logical Area 8. Digital output status. Read only. Words 16bits
          relayOutputStatus1:       { type: t_uint16, initial: !UINT16 2048, comment: "Relay output status 1" }
          relayOutputStatus2:       { type: t_uint16, initial: !UINT16 2049, comment: "Relay output status 2" }
          relayOutputStatus3:       { type: t_uint16, initial: !UINT16 2050, comment: "Relay output status 3" }
          relayOutputStatus4:       { type: t_uint16, initial: !UINT16 2051, comment: "Relay output status 4" }
          relayOutputStatus5:       { type: t_uint16, initial: !UINT16 2052, comment: "Relay output status 5" }
          relayOutputStatus6:       { type: t_uint16, initial: !UINT16 2053, comment: "Relay output status 6" }
          relayOutputStatus7:       { type: t_uint16, initial: !UINT16 2054, comment: "Relay output status 7" }
          #Logical Area 9. Analog output status. Read only. Words 16bits
          AnalogOutputStatus1:      { type: t_uint16, initial: !UINT16 2304, comment: "Fan Condenser1 Output" }
          AnalogOutputStatus2:      { type: t_uint16, initial: !UINT16 2306, comment: "Fan Condenser2 Output" }
          #Logical Area 13. Alarm status. Read only. Words 16bits
          alarmStatus1:             { type: t_uint16, initial: !UINT16 3328, comment: "Alarm status 1" }
          alarmStatus2:             { type: t_uint16, initial: !UINT16 3329, comment: "Alarm status 2" }
          alarmStatus3:             { type: t_uint16, initial: !UINT16 3330, comment: "Alarm status 3" }
          alarmStatus6:             { type: t_uint16, initial: !UINT16 3333, comment: "Alarm status 6" }
          alarmStatus7:             { type: t_uint16, initial: !UINT16 3334, comment: "Alarm status 7" }
          alarmStatus10:            { type: t_uint16, initial: !UINT16 3337, comment: "Alarm status 10" }
          alarmStatus11:            { type: t_uint16, initial: !UINT16 3338, comment: "Alarm status 11" }
          #Logical Area 14. Load hours. R/W. Words 16bits
          hoursCompressor1:         { type: t_uint16, initial: !UINT16 3584, comment: "Operation hours of compressor 1" }
          hoursCompressor2:         { type: t_uint16, initial: !UINT16 3585, comment: "Operation hours of compressor 2" }
          hoursCompressor3:         { type: t_uint16, initial: !UINT16 3586, comment: "Operation hours of compressor 3" }
          hoursCompressor4:         { type: t_uint16, initial: !UINT16 3587, comment: "Operation hours of compressor 4" }
          hoursPump:                { type: t_uint16, initial: !UINT16 3590, comment: "Operation hours of water pump" }         
          #Logical Area 15. Alarms per hour. Read only. Words 16bits
          alarmOilCompressor1:      { type: t_uint16, initial: !UINT16 3840, comment: "Alarm oil Compressor 1" }
          alarmOilCompressor2:      { type: t_uint16, initial: !UINT16 3841, comment: "Alarm oil Compressor 2" }
          alarmOilCompressor3:      { type: t_uint16, initial: !UINT16 3842, comment: "Alarm oil Compressor 3" }
          alarmOilCompressor4:      { type: t_uint16, initial: !UINT16 3843, comment: "Alarm oil Compressor 4" }
          alarmFanOverload:         { type: t_uint16, initial: !UINT16 3846, comment: "Alarm fan overload" }
          alarmColdSideFlowSwitch:  { type: t_uint16, initial: !UINT16 3847, comment: "Alarm cold side flow switch" }
          alarmHotSideFlowSwitch:   { type: t_uint16, initial: !UINT16 3848, comment: "Alarm hot side flow switch" }
          alarmCirc1LowTempPressDI: { type: t_uint16, initial: !UINT16 3849, comment: "Alarm circuit 1 low temppress DI" }
          alarmCirc2LowTempPressDI: { type: t_uint16, initial: !UINT16 3850, comment: "Alarm circuit 2 low temppress DI" }
          alarmCirc1LowTempPressPB: { type: t_uint16, initial: !UINT16 3851, comment: "Alarm circuit 1 low temppress PB" }
          alarmCirc2LowTempPressPB: { type: t_uint16, initial: !UINT16 3852, comment: "Alarm circuit 2 low temppress PB" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus1
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus1:
      comment: "Alarm indicators at AlarmStatus1 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Probe8 (Evap2. Water Temperature)'" }
          bit1:        { type: t_string, initial: !STRING "'Probe9 (Ambient Temperature)'" }
          bit2:        { type: t_string, initial: !STRING "'Probe10 (Not used)'" }
          bit3:        { type: t_string, initial: !STRING "'Probe11 (Not used)'" }
          bit4:        { type: t_string, initial: !STRING "'Probe12 (Not used)'" }
          bit5:        { type: t_string, initial: !STRING "'Compressor1 Maintenance'" }
          bit6:        { type: t_string, initial: !STRING "'Compressor2 Maintenance'" }
          bit7:        { type: t_string, initial: !STRING "'Compressor3 Maintenance'" }
          bit8:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit9:        { type: t_string, initial: !STRING "'Probe1 (Not used)'" }
          bit10:       { type: t_string, initial: !STRING "'Probe2 (Tank. Water Temperature)'" }
          bit11:       { type: t_string, initial: !STRING "'Probe3 (High Pressure Cric1)'" }
          bit12:       { type: t_string, initial: !STRING "'Probe4 (High Pressure Cric2)'" }
          bit13:       { type: t_string, initial: !STRING "'Probe5 (Not used)'" }
          bit14:       { type: t_string, initial: !STRING "'Probe6 (Not used)'" }
          bit15:       { type: t_string, initial: !STRING "'Probe7 (Evap1. Water Temperature)'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus2
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus2:
      comment: "Alarm indicators at AlarmStatus2 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit1:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit2:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit3:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit4:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit5:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit6:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit7:        { type: t_string, initial: !STRING "'Alarm not defined'" }       
          bit8:        { type: t_string, initial: !STRING "'Compressor4 Maintenance'" }
          bit9:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit10:       { type: t_string, initial: !STRING "'Alarm not defined'" }          
          bit11:       { type: t_string, initial: !STRING "'Pump/delivery Fan Maintenance'" }
          bit12:       { type: t_string, initial: !STRING "'Evaporator2 pump Maintenance'" }
          bit13:       { type: t_string, initial: !STRING "'Condenser1 Pump Maintenance'" }
          bit14:       { type: t_string, initial: !STRING "'Condenser2 Pump Maintenance'" }
          bit15:       { type: t_string, initial: !STRING "'Alarm not defined'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus3
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus3:
      comment: "Alarm indicators at AlarmStatus3 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit1:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit2:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit3:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit4:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit5:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit6:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit7:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit8:        { type: t_string, initial: !STRING "'Circuit1 defrost'" }
          bit9:        { type: t_string, initial: !STRING "'Circuit2 defrost'" }
          bit10:       { type: t_string, initial: !STRING "'Network Frequency'" }
          bit11:       { type: t_string, initial: !STRING "'Low Inlet Air Temperature'" }
          bit12:       { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit13:       { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit14:       { type: t_string, initial: !STRING "'Evaporator Low Outlet Temperature'" }
          bit15:       { type: t_string, initial: !STRING "'Evaporator High Outlet Temperature'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus6
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus6:
      comment: "Alarm indicators at AlarmStatus6 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Compressor1 Thermal Overload'" }
          bit1:        { type: t_string, initial: !STRING "'Compressor2 Thermal Overload'" }
          bit2:        { type: t_string, initial: !STRING "'Compressor3 Thermal Overload'" }
          bit3:        { type: t_string, initial: !STRING "'Compressor4 Thermal Overload'" }
          bit4:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit5:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit6:        { type: t_string, initial: !STRING "'Circ1 Cond. Fan Thermal Overload'" }
          bit7:        { type: t_string, initial: !STRING "'Circ2 Cond. Fan Thermal Overload'" }
          bit8:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit9:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit10:       { type: t_string, initial: !STRING "'Compressor1 High Pressure'" }
          bit11:       { type: t_string, initial: !STRING "'Compressor2 High Pressure'" }
          bit12:       { type: t_string, initial: !STRING "'Compressor3 High Pressure'" }
          bit13:       { type: t_string, initial: !STRING "'Compressor4 High Pressure'" }
          bit14:       { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit15:       { type: t_string, initial: !STRING "'Alarm not defined'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus7
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus7:
      comment: "Alarm indicators at AlarmStatus7 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit1:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit2:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit3:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit4:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit5:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit6:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit7:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit8:        { type: t_string, initial: !STRING "'Evap1 Water Pump Thermal Overload'" }
          bit9:        { type: t_string, initial: !STRING "'Evap2 Water Pump Thermal Overload'" }
          bit10:       { type: t_string, initial: !STRING "'Cond1 Pump Thermal Overload'" }
          bit11:       { type: t_string, initial: !STRING "'Cond2 Pump Thermal Overload'" }
          bit12:       { type: t_string, initial: !STRING "'Circ1 High Pressure Switch Tripped'" }
          bit13:       { type: t_string, initial: !STRING "'Circ2 High Pressure Switch Tripped'" }
          bit14:       { type: t_string, initial: !STRING "'Circ1 High Pressure Probe'" }
          bit15:       { type: t_string, initial: !STRING "'Circ2 High Pressure Probe'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus10
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus10:
      comment: "Alarm indicators at AlarmStatus10 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Hot Side Flow Switch'" }
          bit1:        { type: t_string, initial: !STRING "'Cic1 Low Pressure Switch'" }
          bit2:        { type: t_string, initial: !STRING "'Cic2 Low Pressure Switch'" }
          bit3:        { type: t_string, initial: !STRING "'Cic1 Low Pressure Probe'" }
          bit4:        { type: t_string, initial: !STRING "'Cic2 Low Pressure Probe'" }
          bit5:        { type: t_string, initial: !STRING "'Circ1 Pump-Down at startup'" }
          bit6:        { type: t_string, initial: !STRING "'Circ2 Pump-Down at startup'" }
          bit7:        { type: t_string, initial: !STRING "'Circ1 Pump-Down at shutdown'" }
          bit8:        { type: t_string, initial: !STRING "'Compressor1 Oil'" }
          bit9:        { type: t_string, initial: !STRING "'Compressor2 Oil'" }
          bit10:       { type: t_string, initial: !STRING "'Compressor3 Oil'" }
          bit11:       { type: t_string, initial: !STRING "'Compressor4 Oil'" }
          bit12:       { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit13:       { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit14:       { type: t_string, initial: !STRING "'Delivery Fan Thermal Overload'" }
          bit15:       { type: t_string, initial: !STRING "'Cold Side Flow Switch'" }
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatus11
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatus11:
      comment: "Alarm indicators at AlarmStatus11 register"
      items:
          bit0:        { type: t_string, initial: !STRING "'Compressor4 Discharge High Temperature'" }
          bit1:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit2:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit3:        { type: t_string, initial: !STRING "'General Alarm From Digital Input'" }
          bit4:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit5:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit6:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit7:        { type: t_string, initial: !STRING "'Alarm not defined'" }
          bit8:        { type: t_string, initial: !STRING "'Circ2 Pump-Down at shutdown'" }
          bit9:        { type: t_string, initial: !STRING "'Circ1 Chiller Anti-freeze'" }
          bit10:       { type: t_string, initial: !STRING "'Circ2 Chiller Anti-freeze'" }
          bit11:       { type: t_string, initial: !STRING "'Circ1 Pump Anti-freeze'" }
          bit12:       { type: t_string, initial: !STRING "'Circ2 Pump Anti-freeze'" }
          bit13:       { type: t_string, initial: !STRING "'Compressor1 Discharge High Temperature'" }
          bit14:       { type: t_string, initial: !STRING "'Compressor2 Discharge High Temperature'" }
          bit15:       { type: t_string, initial: !STRING "'Compressor3 Discharge High Temperature'" }
  
  ########################################################################################################################
  # ServicesChillerControllerBitwiseConfig
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerBitwiseConfig:
      comment: "Config about words and masks for bitwise actions"  
      items:
          #Words for masks and commands over Unit Status register. Words 16bits
          statusOnMask:    { type: t_uint16, initial: !UINT16 int(0b0000001100000000) , comment: "Word check if Chiller is ON" }
          switchOnMask:    { type: t_uint16, initial: !UINT16 int(0b0000010000000100) , comment: "Word to switch ON the Chiller" }
          switchOffMask:   { type: t_uint16, initial: !UINT16 int(0b0000000000000001) , comment: "Word to switch OFF the Chiller" }
          resetUnitMask:   { type: t_uint16, initial: !UINT16 int(0b0000000010000000) , comment: "Word to reset controller Unit" }
          resetAlarmMask:  { type: t_uint16, initial: !UINT16 int(0b0001000000010000) , comment: "Word to reset Alarm" }
          #Masks for bitwise checking in 16 bit registers
          flowSwitchMask:  { type: t_uint16, initial: !UINT16 int(0b0000100000000000) , comment: "Word to check if Flow switch is ON" }
          alarmOnMask:     { type: t_uint16, initial: !UINT16 int(0b0000000100000001) , comment: "Word to check if Alarm relay is ON" }
          waterPumpOnMask: { type: t_uint16, initial: !UINT16 int(0b0000001000000010) , comment: "Word to check if water Pump relay is ON" }
          compressor1Mask: { type: t_uint16, initial: !UINT16 int(0b0010000000100000) , comment: "Word to check if Compressor1 is ON" }    
          compressor2Mask: { type: t_uint16, initial: !UINT16 int(0b0001000000010000) , comment: "Word to check if Compressor2 is ON" }
          compressor3Mask: { type: t_uint16, initial: !UINT16 int(0b0000100000001000) , comment: "Word to check if Compressor3 is ON" }
          compressor4Mask: { type: t_uint16, initial: !UINT16 int(0b0000010000000100) , comment: "Word to check if Compressor4 is ON" }
          circ1CondFanOverMask: { type: t_uint16, initial: int(0b1000000000000000), comment: "Word to check if Circ1 condensing fan overload" }
          circ2CondFanOverMask: { type: t_uint16, initial: int(0b0000000000000001), comment: "Word to check if Circ2 condensing fan overload" }
          CondFanComOverMask:   { type: t_uint16, initial: int(0b0000000000000010), comment: "Word to check if Circ2 condensing fan overload" }
          #Words for masks and commands over Unit Status II register. Words 16bits
          disableCirc1Mask: { type: t_uint16, initial: int(0b0100000001000000), comment: "Word to disable Circuit 1" }
          disableCirc2Mask: { type: t_uint16, initial: int(0b1000000010000000), comment: "Word to disable Circuit 2" }
          disableComp1Mask: { type: t_uint16, initial: int(0b0000000100000001), comment: "Word to disable Compressor 1" }
          disableComp2Mask: { type: t_uint16, initial: int(0b0000001000000010), comment: "Word to disable Compressor 2" }
          disableComp3Mask: { type: t_uint16, initial: int(0b0000010000000100), comment: "Word to disable Compressor 3" }
          disableComp4Mask: { type: t_uint16, initial: int(0b0000100000001000), comment: "Word to disable Compressor 4" }
          enableCirc1Mask:  { type: t_uint16, initial: int(0b0000000001000000), comment: "Word to enable Circuit 1" }
          enableCirc2Mask:  { type: t_uint16, initial: int(0b0000000010000000), comment: "Word to enable Circuit 2" }
          enableComp1Mask:  { type: t_uint16, initial: int(0b0000000000000001), comment: "Word to enable Compressor 1" }
          enableComp2Mask:  { type: t_uint16, initial: int(0b0000000000000010), comment: "Word to enable Compressor 2" }
          enableComp3Mask:  { type: t_uint16, initial: int(0b0000000000000100), comment: "Word to enable Compressor 3" }
          enableComp4Mask:  { type: t_uint16, initial: int(0b0000000000001000), comment: "Word to enable Compressor 4" }
          #Masks for bitwise checking in 16 bit registers
          bit0:            { type: t_uint16, initial: !UINT16 int(0b0000000000000001) , comment: "Word mask to check bit0" }
          bit1:            { type: t_uint16, initial: !UINT16 int(0b0000000000000010) , comment: "Word mask to check bit1" }
          bit2:            { type: t_uint16, initial: !UINT16 int(0b0000000000000100) , comment: "Word mask to check bit2" }
          bit3:            { type: t_uint16, initial: !UINT16 int(0b0000000000001000) , comment: "Word mask to check bit3" }
          bit4:            { type: t_uint16, initial: !UINT16 int(0b0000000000010000) , comment: "Word mask to check bit4" }
          bit5:            { type: t_uint16, initial: !UINT16 int(0b0000000000100000) , comment: "Word mask to check bit5" }
          bit6:            { type: t_uint16, initial: !UINT16 int(0b0000000001000000) , comment: "Word mask to check bit6" }
          bit7:            { type: t_uint16, initial: !UINT16 int(0b0000000010000000) , comment: "Word mask to check bit7" }
          bit8:            { type: t_uint16, initial: !UINT16 int(0b0000000100000000) , comment: "Word mask to check bit8" }
          bit9:            { type: t_uint16, initial: !UINT16 int(0b0000001000000000) , comment: "Word mask to check bit9" }
          bit10:           { type: t_uint16, initial: !UINT16 int(0b0000010000000000) , comment: "Word mask to check bit10" }
          bit11:           { type: t_uint16, initial: !UINT16 int(0b0000100000000000) , comment: "Word mask to check bit11" }
          bit12:           { type: t_uint16, initial: !UINT16 int(0b0001000000000000) , comment: "Word mask to check bit12" }
          bit13:           { type: t_uint16, initial: !UINT16 int(0b0010000000000000) , comment: "Word mask to check bit13" }
          bit14:           { type: t_uint16, initial: !UINT16 int(0b0100000000000000) , comment: "Word mask to check bit14" }
          bit15:           { type: t_uint16, initial: !UINT16 int(0b1000000000000000) , comment: "Word mask to check bit15" }
  
  
  ########################################################################################################################
  # ServicesChillerControllerAlarmStatusRegisters
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerAlarmStatusRegisters:
      comment: "Config about Alarm statuses registers"
      items:
          AlarmStatus1:
              type: ServicesChillerControllerAlarmStatus1
              comment: "Alarm indicators at AlarmStatus1 register"
          AlarmStatus2:
              type: ServicesChillerControllerAlarmStatus2
              comment: "Alarm indicators at AlarmStatus2 register"
          AlarmStatus3:
              type: ServicesChillerControllerAlarmStatus3
              comment: "Alarm indicators at AlarmStatus3 register"
          AlarmStatus6:
              type: ServicesChillerControllerAlarmStatus6
              comment: "Alarm indicators at AlarmStatus6 register"
          AlarmStatus7:
              type: ServicesChillerControllerAlarmStatus7
              comment: "Alarm indicators at AlarmStatus7 register"
          AlarmStatus10:
              type: ServicesChillerControllerAlarmStatus10
              comment: "Alarm indicators at AlarmStatus10 register"
          AlarmStatus11:
              type: ServicesChillerControllerAlarmStatus11
              comment: "Alarm indicators at AlarmStatus11 register"
  
  
  ########################################################################################################################
  # ServicesChillerControllerVariables
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerVariables:
      items:
          #Logical Area 3. Data. R/W. Words 16bits
          setpoint:
              type: t_double
              comment: "Setpoint"
          minSetpoint: 
              type: t_double
              comment: "Minimun setpoint"
          maxSetpoint:
              type: t_double
              comment: "Maximal setpoint"
          trippingBand:
              type: t_double
              comment: "Tripping band"     
  
  
  ########################################################################################################################
  # ServicesChillerControllerConfig
  ########################################################################################################################
  
  !CONFIG ServicesChillerControllerConfig:
      items:
          unitID:
              type: t_uint8
              comment: "The address or UnitID of the controller"
          waterTankTemperatureMeasurement:
              type: mtcs_common.MeasurementConfig
              comment: "The WaterTank measurement config"
          warningMessageWaterTemperatureMeasurement:
              type: t_string
              comment: "A warning message (empty = not shown)"
          waterPumpSupervisorMeasurement:
              type: mtcs_common.MeasurementConfig
              comment: "The WaterPump supervisor measurement config"
          messageWaterPumpSupervisorMeasurement:
              type: t_string
              comment: "A message to be shown on config tab"
          warningMessageWaterPumpSupervisorMeasurement:
              type: t_string
              comment: "A warning message (empty = not shown)"
          parameterAddresses:
              type: ServicesChillerControllerParameterAddresses
              comment: "Config about Modbus parameters addresses"
          variables:
              type: ServicesChillerControllerVariables
              comment: "Config value for some parameters"
          alarmRegisters:
              type: ServicesChillerControllerAlarmStatusRegisters
              comment: "Config about Alarm statuses registers"
          bitwise:
              type: ServicesChillerControllerBitwiseConfig
              comment: "Config about words and masks for bitwise actions"
  
  ########################################################################################################################
  # ServicesChillerConfig
  ########################################################################################################################
  
  !CONFIG ServicesChillerConfig:
      items:
          updateSetpoint:
              type: t_bool
              comment: "True to automatically update the setpoint"
          temperatureToChangeSetpoint:
              type: t_double
              comment: "Temperature to change Setpoint"   
          summerSetpoint:
              type: t_double
              comment: "Temperature setpoint for summer"            
          winterSetpoint:
              type: t_double
              comment: "Temperature setpoint for winter"
          offsetSetpoint:
              type: t_double
              comment: "Setpoint = air temperature of meteo station + this offset (in degrees celsius)"
          updateSetpointInterval:
              type: t_double
              comment: "Time interval to check ambient/setpoint temperature in seconds"
          updateVariables:
              type: t_bool
              comment: "True to automatically update the setpoint"
          pollingMeasuresInterval:
              type: t_double
              comment: "Time between bus measurement reads in seconds"
          pollingConfigInterval:
              type: t_double
              comment: "Time between bus config variables reads in seconds"
          pollingAlarmsInterval:
              type: t_double
              comment: "Time between bus alarm registers reads in seconds"
          chillerMainController:
              type: ServicesChillerControllerConfig
              comment: "The Chiller controller config"
  
  ########################################################################################################################
  # ServicesConfig
  ########################################################################################################################
  
  !CONFIG ServicesConfig:
      items:
          timing:
              type: ServicesTimingConfig
              comment: "Timing config"
              expand: false
          meteo:
              type: ServicesMeteoConfig
              comment: "Meteo config"
          west:
              type: ServicesWestConfig
              comment: "West config"
          chiller:
              type: ServicesChillerConfig
              comment: "Chiller config"
  
  ########################################################################################################################
  # Services
  ########################################################################################################################
  
  !STATEMACHINE Services:
      variables:
          editableConfig                  : { type: ServicesConfig              , comment: "Editable configuration of the Services subsystem", expand: false }
      references:
          operatorStatus                  : { type: mtcs_common.OperatorStatus  , comment: "Shared operator status" }
          domeApertureStatus              : { type: mtcs_common.ApertureStatus  , comment: "Is the dome open or closed?", expand: false }
      variables_read_only:
          config                          : { type: ServicesConfig              , comment: "Active configuration of the Services subsystem" }
      parts:
          timing:
              comment                     : "Timing service"
              arguments:
                  config                  : {}
                  operatorStatus          : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          meteo:
              comment                     : "Meteo service"
              arguments:
                  config                  : {}
              attributes:
                  airTemperature          : {}
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          west:
              comment                     : "West service"
              arguments:
                  operatorStatus          : {}
                  config                  : {}
                  airTemperature          : {}
                  domeApertureStatus      : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }       
          chiller:
              comment                     : "Chiller service"
              arguments:
                  operatorStatus          : {}
                  config                  : {}
                  airTemperature          : {}
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          io:
              comment                     : "I/O modules"
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
          configManager:
              comment                     : "The config manager (to load/save/activate configuration data)"
              type                        : mtcs_common.ConfigManager
      statuses:
          initializationStatus            : { type: mtcs_common.InitializationStatus }
          healthStatus                    : { type: mtcs_common.HealthStatus }
          busyStatus                      : { type: mtcs_common.BusyStatus }
          operatingStatus                 : { type: mtcs_common.OperatingStatus }
      processes:
          initialize                      : { type: mtcs_common.Process                       , comment: "Start initializing" }
          lock                            : { type: mtcs_common.Process                       , comment: "Lock the system" }
          unlock                          : { type: mtcs_common.Process                       , comment: "Unlock the system" }
          changeOperatingState            : { type: mtcs_common.ChangeOperatingStateProcess   , comment: "Change the operating state (e.g. AUTO, MANUAL, ...)" }
      calls:
          initialize:
              isEnabled                   : !OR [ statuses.initializationStatus.shutdown,
                                                  statuses.initializationStatus.initializingFailed,
                                                  statuses.initializationStatus.initialized ]
          lock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.initialized ]
          unlock:
              isEnabled                   : !AND [ operatorStatus.tech, statuses.initializationStatus.locked ]
          changeOperatingState:
              isEnabled                   : !BOOL FALSE # there is no MANUAL mode #-> !AND [ statuses.busyStatus.idle, statuses.initializationStatus.initialized)
          operatingStatus:
              superState                  : statuses.initializationStatus.initialized
          healthStatus:
              isGood                      : !MTCS_SUMMARIZE_GOOD [ parts.timing, 
                                                                   parts.meteo,
                                                                   parts.west,
                                                                   parts.chiller,
                                                                   parts.io ]
              hasWarning                  : !MTCS_SUMMARIZE_WARN [ parts.timing, 
                                                                   parts.meteo,
                                                                   parts.west,
                                                                   parts.chiller,
                                                                   parts.io ]
          busyStatus:
              isBusy                      : statuses.initializationStatus.initializing
          configManager:
              isEnabled                   : operatorStatus.tech
          timing:
              operatorStatus              : operatorStatus
              config                      : config.timing
          meteo:
              config                      : config.meteo
          west:
              operatorStatus              : operatorStatus
              config                      : config.west
              airTemperature              : parts.meteo.airTemperature
              domeApertureStatus          : domeApertureStatus
          chiller:
              operatorStatus              : operatorStatus
              config                      : config.chiller
              airTemperature              : parts.meteo.airTemperature
  
  ########################################################################################################################
  # ServicesTiming
  ########################################################################################################################
  
  !STATEMACHINE ServicesTiming:
      typeOf                              : [ ServicesParts.timing ]
      variables:
          fromEL6688                      : { type: mtcs_tmc.TmcFromIoEL6688      , address: "%I*" , comment: "Data from the EL6688", expand: false}
          fromEcatMaster                  : { type: mtcs_tmc.TmcFromIoEcatMaster  , address: "%I*" , comment: "Data from the EtherCAT master", expand: false}
          fromCppTiming                   : { type: mtcs_tmc.TmcToPlcTiming       , address: "%I*" , comment: "Data from the C++ task", expand: false}
      references:
          operatorStatus                  : { type: mtcs_common.OperatorStatus    , comment: "Shared operator status"}
          config                          : { type: ServicesTimingConfig          , comment: "The config" }
      variables_read_only:
          toCppTiming                     : { type: mtcs_tmc.TmcFromPlcTiming     , address: "%Q*" , comment: "Data to the C++ task", expand: false}
          # actual source
          utcDateString                   : { type: t_string                      , comment: "UTC date as a string of format YYYY-MM-DD" }
          utcTimeString                   : { type: t_string                      , comment: "UTC time as a string of format HH-MM-SS.SSS" }
          # timestamp strings
          internalTimestampString         : { type : t_string                     , comment: "String representation of the internal timestamp"}
          externalTimestampString         : { type : t_string                     , comment: "String representation of the external timestamp (note: this is TAI, not UTC!)"}
      parts:
          serialInfo:
              comment                     : "Info acquired by serial link"
              attributes:
                  statuses:
                      attributes:
                          healthStatus    : { type: mtcs_common.HealthStatus }
      statuses:
          healthStatus                    : { type: mtcs_common.HealthStatus }
      processes:
          {}
      calls:
          healthStatus:
              isGood                      : !OR [ config.ignoreSerialError, parts.serialInfo.statuses.healthStatus.good ]
  
  
  ########################################################################################################################
  # ServicesTimingSerialInfo
  ########################################################################################################################
  
  !STATEMACHINE ServicesTimingSerialInfo:
      typeOf                          : [ ServicesTimingParts.serialInfo ]
      variables_read_only:
          serialTimeout               : { type: t_bool    , comment: "Is the serial data not being received within time?" }
          comError                    : { type: t_bool    , comment: "Is there any problem with the COM port?" }
          comErrorID                  : { type: t_int16   , comment: "COM error id (see Beckhoff ComError_t)" }
          comErrorDescription         : { type: t_string  , comment: "Description of the COM error id" }
          time_h                      : { type: t_uint8   , comment: "Time: hours (0-24)" }
          time_m                      : { type: t_uint8   , comment: "Time: minutes (0-59)" }
          time_s                      : { type: t_uint8   , comment: "Time: seconds (0-59, or 60 if leap second)" }
          latitude_deg                : { type: t_uint8   , comment: "Latitude: degrees (0-90)" }
          latitude_min                : { type: t_float   , comment: "Latitude: minutes (0.0-59.99999)" }
          latitude_sign               : { type: t_string  , comment: "Latitude: sign (either 'N' or 'S')" }
          longitude_deg               : { type: t_uint8   , comment: "Longitude: degrees (0-180)" }
          longitude_min               : { type: t_float   , comment: "Longitude: minutes (0.0-59.99999)" }
          longitude_sign              : { type: t_string  , comment: "Longitude: sign (either 'E' or 'W')" }
          positionFix                 : { type: t_bool    , comment: "True if a position fix was accomplished, False if not" }
          satellitesUsed              : { type: t_uint8   , comment: "Number of satellites used" }
          horizontalDilutionOfPosition: { type: t_float   , comment: "Horizontal dilution of position" }
          meanSeaLevelAltitude        : { type: t_float   , comment: "Mean altitude above sea level in meters" }
          geoidSeparation             : { type: t_float   , comment: "Geoid separation in meters" }
          checksum                    : { type: t_uint8   , comment: "Checksum send by the time server" }
          calculatedChecksum          : { type: t_uint8   , comment: "Checksum calculated by the PLC" }
      statuses:
          portHealthStatus            : { type: mtcs_common.HealthStatus }
          transmissionHealthStatus    : { type: mtcs_common.HealthStatus }
          checksumHealthStatus        : { type: mtcs_common.HealthStatus }
          healthStatus                : { type: mtcs_common.HealthStatus }
      calls:
          portHealthStatus:
              isGood                  : !NOT [ comError ]
          transmissionHealthStatus:
              isGood                  : !NOT [ serialTimeout ]
          checksumHealthStatus:
              isGood                  : !EQ [ checksum, calculatedChecksum ]
          healthStatus:
              isGood                  : !AND [  statuses.portHealthStatus.good,
                                                statuses.transmissionHealthStatus.good,
                                                statuses.checksumHealthStatus.good ]
  
  
  
  ########################################################################################################################
  # ServicesMeteoId
  ########################################################################################################################
  
  
  !ENUMERATION ServicesMeteoId:
      items:
          [
              "WIND_SPEED_MINIMUM",
              "WIND_SPEED_AVERAGE",
              "WIND_SPEED_MAXIMUM",
              "WIND_DIRECTION_MINIMUM",
              "WIND_DIRECTION_AVERAGE",
              "WIND_DIRECTION_MAXIMUM",
              "AIR_PRESSURE",
              "AIR_TEMPERATURE",
              "INTERNAL_TEMPERATURE",
              "RELATIVE_HUMIDITY",
              "RAIN_ACCUMULATION",
              "RAIN_DURATION",
              "RAIN_INTENSITY",
              "RAIN_PEAK_INTENSITY",
              "HAIL_ACCUMULATION",
              "HAIL_DURATION",
              "HAIL_PEAK_INTENSITY",
              "HAIL_INTENSITY",
              "HEATING_TEMPERATURE",
              "HEATING_VOLTAGE",
              "SUPPLY_VOLTAGE",
              "REFERENCE_VOLTAGE",
          ]
  
  
  ########################################################################################################################
  # ServicesMeteoMeasurement
  ########################################################################################################################
  !STATEMACHINE ServicesMeteoMeasurement:
      variables:
          id              : { type: ServicesMeteoId                 , comment: "ID" }
      variables_hidden:
          inputString     : { type: t_string                        , comment: "Input string from the meteo station" }
      variables_read_only:
          data            : { type: mtcs_common.QuantityValue       , comment: "Actual value" }
          invalidData     : { type: t_bool                          , comment: "True if the data is invalid" }
          lastChar        : { type: t_string                        , comment: "Last character" }
          name            : { type: t_string                        , comment: "Name of the measurementw" }
      references:
          config          : { type: mtcs_common.MeasurementConfig   , comment: "Reference to the config" }
      statuses:
          enabledStatus   : { type: mtcs_common.EnabledStatus       , comment: "Is the temperature being measured?" }
          healthStatus    : { type: mtcs_common.HealthStatus        , comment: "Is the data valid and within range?" }
          alarmStatus     : { type: mtcs_common.HiHiLoLoAlarmStatus , comment: "Alarm status"}
      calls:
          enabledStatus:
              isEnabled    : config.enabled
          alarmStatus:
              superState   : statuses.enabledStatus.enabled
              config       : config.alarms
              value        : data.value
          healthStatus:
              superState   : statuses.enabledStatus.enabled
              isGood       : !NOT [ !OR [ invalidData,
                                          statuses.alarmStatus.hiHi,
                                          statuses.alarmStatus.loLo ] ]
              hasWarning   : !OR [ statuses.alarmStatus.hi,
                                   statuses.alarmStatus.lo ]
  
  
  
  ########################################################################################################################
  # ServicesMeteo
  ########################################################################################################################
  
  !STATEMACHINE ServicesMeteo:
      typeOf                          : [ ServicesParts.meteo ]
      variables:
          # serial comm
          serialTimeout               : { type: t_bool    , comment: "Is the serial data not being received within time?" }
          comError                    : { type: t_bool    , comment: "Is there any problem with the COM port?" }
          comErrorID                  : { type: t_int16   , comment: "COM error id (see Beckhoff ComError_t)" }
          comErrorDescription         : { type: t_string  , comment: "Description of the COM error id" }
          # measurements
          windSpeedMinimum            : { type: ServicesMeteoMeasurement  , comment: "Wind speed minimum" }
          windSpeedAverage            : { type: ServicesMeteoMeasurement  , comment: "Wind speed average" }
          windSpeedMaximum            : { type: ServicesMeteoMeasurement  , comment: "Wind speed maximum" }
          windDirectionMinimum        : { type: ServicesMeteoMeasurement  , comment: "Wind direction minimum" }
          windDirectionAverage        : { type: ServicesMeteoMeasurement  , comment: "Wind direction average" }
          windDirectionMaximum        : { type: ServicesMeteoMeasurement  , comment: "Wind direction maximum" }
          airPressure                 : { type: ServicesMeteoMeasurement  , comment: "Air pressure" }
          airTemperature              : { type: ServicesMeteoMeasurement  , comment: "Air temperature" }
          internalTemperature         : { type: ServicesMeteoMeasurement  , comment: "Internal temperature" }
          relativeHumidity            : { type: ServicesMeteoMeasurement  , comment: "Relative humidity" }
          rainAccumulation            : { type: ServicesMeteoMeasurement  , comment: "Rain accumulation" }
          rainDuration                : { type: ServicesMeteoMeasurement  , comment: "Rain duration" }
          rainIntensity               : { type: ServicesMeteoMeasurement  , comment: "Rain intensity" }
          rainPeakIntensity           : { type: ServicesMeteoMeasurement  , comment: "Rain peak intensity" }
          hailAccumulation            : { type: ServicesMeteoMeasurement  , comment: "Hail accumulation" }
          hailDuration                : { type: ServicesMeteoMeasurement  , comment: "Hail duration" }
          hailIntensity               : { type: ServicesMeteoMeasurement  , comment: "Hail intensity" }
          hailPeakIntensity           : { type: ServicesMeteoMeasurement  , comment: "Hail peak intensity" }
          heatingTemperature          : { type: ServicesMeteoMeasurement  , comment: "Heating temperature" }
          heatingVoltage              : { type: ServicesMeteoMeasurement  , comment: "Heating voltage" }
          supplyVoltage               : { type: ServicesMeteoMeasurement  , comment: "Supply voltage" }
          referenceVoltage            : { type: ServicesMeteoMeasurement  , comment: "Reference voltage" }
          # durationOK
          durationOK                  : { type: mtcs_common.Duration              , comment: "Duration that the meteo is OK" }
          dewpoint                    : { type: mtcs_common.Temperature           , comment: "Calculated dewpoint" }
          wet                         : { type: t_bool                            , comment: "Wet if (rainIntensity+hailIntensity) > config.wetLimit" }
          heating                     : { type: t_bool                            , comment: "Heating or not?"}
          windDirectionMinimumString  : { type: t_string                          , comment: "Average direction of the wind as a string"}
          windDirectionAverageString  : { type: t_string                          , comment: "Average direction of the wind as a string"}
          windDirectionMaximumString  : { type: t_string                          , comment: "Average direction of the wind as a string"}
      references:
          config                      : { type: ServicesMeteoConfig  , comment: "The config" }
      statuses:
          meteoHealthStatus           : { type: mtcs_common.HealthStatus }
          healthStatus                : { type: mtcs_common.HealthStatus }
      processes:
          {}
      calls:
          windSpeedMinimum:
              id                      : ServicesMeteoId.WIND_SPEED_MINIMUM
              config                  : config.windSpeedMinimum
          windSpeedAverage:
              id                      : ServicesMeteoId.WIND_SPEED_AVERAGE
              config                  : config.windSpeedAverage
          windSpeedMaximum:
              id                      : ServicesMeteoId.WIND_SPEED_MAXIMUM
              config                  : config.windSpeedMaximum
          windDirectionMinimum:
              id                      : ServicesMeteoId.WIND_DIRECTION_MINIMUM
              config                  : config.windDirectionMinimum
          windDirectionAverage:
              id                      : ServicesMeteoId.WIND_DIRECTION_AVERAGE
              config                  : config.windDirectionAverage
          windDirectionMaximum:
              id                      : ServicesMeteoId.WIND_DIRECTION_MAXIMUM
              config                  : config.windDirectionMaximum
          airPressure:
              id                      : ServicesMeteoId.AIR_PRESSURE
              config                  : config.airPressure
          airTemperature:
              id                      : ServicesMeteoId.AIR_TEMPERATURE
              config                  : config.airTemperature
          internalTemperature:
              id                      : ServicesMeteoId.INTERNAL_TEMPERATURE
              config                  : config.internalTemperature
          relativeHumidity:
              id                      : ServicesMeteoId.RELATIVE_HUMIDITY
              config                  : config.relativeHumidity
          rainAccumulation:
              id                      : ServicesMeteoId.RAIN_ACCUMULATION
              config                  : config.rainAccumulation
          rainDuration:
              id                      : ServicesMeteoId.RAIN_DURATION
              config                  : config.rainDuration
          rainIntensity:
              id                      : ServicesMeteoId.RAIN_INTENSITY
              config                  : config.rainIntensity
          rainPeakIntensity:
              id                      : ServicesMeteoId.RAIN_PEAK_INTENSITY
              config                  : config.rainPeakIntensity
          hailAccumulation:
              id                      : ServicesMeteoId.HAIL_ACCUMULATION
              config                  : config.hailAccumulation
          hailDuration:
              id                      : ServicesMeteoId.HAIL_DURATION
              config                  : config.hailDuration
          hailIntensity:
              id                      : ServicesMeteoId.HAIL_INTENSITY
              config                  : config.hailIntensity
          hailPeakIntensity:
              id                      : ServicesMeteoId.HAIL_PEAK_INTENSITY
              config                  : config.hailPeakIntensity
          heatingTemperature:
              id                      : ServicesMeteoId.HEATING_TEMPERATURE
              config                  : config.heatingTemperature
          heatingVoltage:
              id                      : ServicesMeteoId.HEATING_VOLTAGE
              config                  : config.heatingVoltage
          supplyVoltage:
              id                      : ServicesMeteoId.SUPPLY_VOLTAGE
              config                  : config.supplyVoltage
          referenceVoltage:
              id                      : ServicesMeteoId.REFERENCE_VOLTAGE
              config                  : config.referenceVoltage
          healthStatus:
              isGood                  : !NOT [ !OR [ serialTimeout, comError ] ]
          meteoHealthStatus:
              superState              : statuses.healthStatus.good
              isGood                  : !MTCS_SUMMARIZE_GOOD_OR_DISABLED [
                                                  windSpeedMinimum,
                                                  windSpeedAverage,
                                                  windSpeedMaximum,
                                                  windDirectionMinimum,
                                                  windDirectionAverage,
                                                  windDirectionMaximum,
                                                  airPressure,
                                                  airTemperature,
                                                  internalTemperature,
                                                  relativeHumidity,
                                                  rainAccumulation,
                                                  rainDuration,
                                                  rainIntensity,
                                                  rainPeakIntensity,
                                                  hailAccumulation,
                                                  hailDuration,
                                                  hailIntensity,
                                                  hailPeakIntensity,
                                                  heatingTemperature,
                                                  heatingVoltage,
                                                  supplyVoltage,
                                                  referenceVoltage ]
              hasWarning                 : !MTCS_SUMMARIZE_WARN [
                                                  windSpeedMinimum,
                                                  windSpeedAverage,
                                                  windSpeedMaximum,
                                                  windDirectionMinimum,
                                                  windDirectionAverage,
                                                  windDirectionMaximum,
                                                  airPressure,
                                                  airTemperature,
                                                  internalTemperature,
                                                  relativeHumidity,
                                                  rainAccumulation,
                                                  rainDuration,
                                                  rainIntensity,
                                                  rainPeakIntensity,
                                                  hailAccumulation,
                                                  hailDuration,
                                                  hailIntensity,
                                                  hailPeakIntensity,
                                                  heatingTemperature,
                                                  heatingVoltage,
                                                  supplyVoltage,
                                                  referenceVoltage ]
  
  ########################################################################################################################
  # ServicesWestController
  ########################################################################################################################
  !STATEMACHINE ServicesWestController:
      variables:
          isEnabled           : { type: t_bool                   , comment: "Are the processes enabled?" }
          manualControl       : { type: t_bool                   , comment: "Controller switched to manualControl" }
          unit                : { type: mtcs_common.Units }
          setpoint            : { type: mtcs_common.QuantityValue, comment: "The current setpoint" }
          defaultSetpoint     : { type: mtcs_common.QuantityValue, comment: "The default setpoint" }
          minSetpoint         : { type: mtcs_common.QuantityValue, comment: "The minimun setpoint" }
          maxSetpoint         : { type: mtcs_common.QuantityValue, comment: "The maximal setpoint" }
          offset              : { type: mtcs_common.QuantityValue, comment: "Offset internally added to Process Value" }
          differentialOnOff   : { type: mtcs_common.QuantityValue, comment: "Differential band for On/Off" }
          alarmValue          : { type: mtcs_common.QuantityValue, comment: "Alarm value from setpoint" }
          inputFilter         : { type: mtcs_common.QuantityValue, comment: "Input input filter time constant" }
          cycleTime           : { type: mtcs_common.QuantityValue, comment: "Cycle time for control loop" }
          proportionalBand    : { type: mtcs_common.QuantityValue, comment: "Proportional band constant" }
          resetTime           : { type: mtcs_common.QuantityValue, comment: "Integral time constant" }
          rate                : { type: mtcs_common.QuantityValue, comment: "Derivative time constant" }
          outputPower         : { type: mtcs_common.QuantityValue, comment: "The Output power in percentage" }
  
      variables_read_only:
          invalidData         : { type: t_bool                   , comment: "True if there is invalid data"}
          processValue        : { type: mtcs_common.QuantityValue, comment: "The Process value" }
          alarmActivated      : { type: t_bool                   , comment: "True if controller alarm is activated"}
  
      references:
          config              : { type: ServicesWestControllerConfig     , comment: "A small config only for a single WEST controller" }
          bus                 : { type: mtcs_common.ModbusRTUBus         , comment: "The shared Modbus RTU bus" }
  
      processes:
          updateProcessVariables    : { type: mtcs_common.Process                 , comment: "Read process variables"}
          updateConfigVariables     : { type: mtcs_common.Process                 , comment: "Read config variables"}
          writeSetpoint             : { type: mtcs_common.ChangeSetpointProcess   , comment: "Write the setpoint"}
          writeOffset               : { type: mtcs_common.ChangeParameterProcess  , comment: "Set an internal offset to Process Value"}
          writeProportinalBand      : { type: mtcs_common.ChangeParameterProcess  , comment: "Set the Proportinal band constant"}
          writeResetTime            : { type: mtcs_common.ChangeParameterProcess  , comment: "Set the Integral time constant"}
          writeRate                 : { type: mtcs_common.ChangeParameterProcess  , comment: "Set the Derivative time constant"}
          switchToManual            : { type: mtcs_common.Process                 , comment: "Switch controller to Manual"}
          switchToAuto              : { type: mtcs_common.Process                 , comment: "Switch controller to Auto"}
          writeOutputPower          : { type: mtcs_common.ChangeParameterProcess  , comment: "Set a specific output power"}
          writeConfigToController   : { type: mtcs_common.Process                 , comment: "Write saved config to Controller"}
  
      statuses:
          healthStatus        : { type: mtcs_common.HealthStatus        , comment: "Is the data valid and within range?" }
          alarmStatus         : { type: mtcs_common.HiHiLoLoAlarmStatus , comment: "Alarm status"}
  
      calls:
          alarmStatus:
              superState   : config.measurement.enabled
              config       : config.measurement.alarms
              value        : processValue.value
          healthStatus:
              superState   : config.measurement.enabled
              isGood       : !NOT [ !OR [ invalidData,
                                          statuses.alarmStatus.hiHi,
                                          statuses.alarmStatus.loLo ] ]
              hasWarning   : !OR [  statuses.alarmStatus.hi,
                                    statuses.alarmStatus.lo ]
          updateProcessVariables:
              isEnabled:  isEnabled
          updateConfigVariables:
              isEnabled:  isEnabled
          writeSetpoint:
              isEnabled:  isEnabled
          writeOffset:
              isEnabled:  isEnabled
          writeProportinalBand:
              isEnabled:  isEnabled
          writeResetTime:
              isEnabled:  isEnabled
          writeRate:
              isEnabled:  isEnabled
          switchToManual:
              isEnabled:  isEnabled
          switchToAuto:
              isEnabled:  isEnabled
          writeOutputPower:
              isEnabled:  isEnabled
          writeConfigToController:
              isEnabled:  isEnabled
  
  ########################################################################################################################
  # ServicesWest
  ########################################################################################################################
  
  !STATEMACHINE ServicesWest:
      typeOf                          : [ ServicesParts.west ]
      variables:
          {}
      references:
          operatorStatus              : { type: mtcs_common.OperatorStatus  , comment: "Shared operator status" }
          config                      : { type: ServicesWestConfig          , comment: "The config" }
          airTemperature              : { type: ServicesMeteoMeasurement    , comment: "Air temperature" }
          domeApertureStatus          : { type: mtcs_common.ApertureStatus  , comment: "Is the dome open or closed?", expand: false }
      statuses:
          healthStatus                : { type: mtcs_common.HealthStatus    , comment: "Are the WESTs in healthy state (good) or not (bad)" }
          operatingStatus             : { type: mtcs_common.OperatingStatus , comment: "Are the WESTs being polled (auto) or not (manual)?" }
      parts:
          bus                         : { type: mtcs_common.ModbusRTUBus    , comment: "The shared Modbus RTU bus" }
          domeTemperature             : { type: ServicesWestController      , comment: "The West coparts.chillerMainController.parts.chillerMainControllerntroller at the dome to control the temperature " }
          firstFloorTemperature       : { type: ServicesWestController      , comment: "The West controller at the first floor to control the temperature" }
          pumpsRoomTemperature        : { type: ServicesWestController      , comment: "The West controller at the pumps room to control the temperature" }
          oilHeatExchangerTemperature : { type: ServicesWestController      , comment: "The West controller at the heat exchanger to control the oil temperature" }
          serversRoomTemperature     : { type: ServicesWestController       , comment: "The West controller at the servers room to control the temperature" }
      processes:
          changeOperatingState        : { type: mtcs_common.ChangeOperatingStateProcess   , comment: "Change the operating state (e.g. AUTO, MANUAL, ...)" }
      calls:
          operatingStatus:
              {}
          changeOperatingState:
              isEnabled               : operatorStatus.tech
          healthStatus:
              isGood                  : !MTCS_SUMMARIZE_GOOD [ parts.domeTemperature,
                                                               parts.firstFloorTemperature,
                                                               parts.pumpsRoomTemperature,
                                                               parts.oilHeatExchangerTemperature,
                                                               parts.serversRoomTemperature ]
              hasWarning              : !MTCS_SUMMARIZE_WARN [ parts.domeTemperature,
                                                               parts.firstFloorTemperature,
                                                               parts.pumpsRoomTemperature,
                                                               parts.oilHeatExchangerTemperature,
                                                               parts.serversRoomTemperature ]
          bus:
              isEnabled               : !AND [ operatorStatus.tech, statuses.operatingStatus.manual ]
          domeTemperature:
              isEnabled               : parts.bus.isEnabled
              unit                    : mtcs_common.Units.DEGREES_CELSIUS
              config                  : config.domeTemperature
              bus                     : parts.bus
          firstFloorTemperature:
              isEnabled               : parts.bus.isEnabled
              unit                    : mtcs_common.Units.DEGREES_CELSIUS
              config                  : config.firstFloorTemperature
              bus                     : parts.bus
          pumpsRoomTemperature:
              isEnabled               : parts.bus.isEnabled
              unit                    : mtcs_common.Units.DEGREES_CELSIUS
              config                  : config.pumpsRoomTemperature
              bus                     : parts.bus
          oilHeatExchangerTemperature:
              isEnabled               : parts.bus.isEnabled
              unit                    : mtcs_common.Units.DEGREES_CELSIUS
              config                  : config.oilHeatExchangerTemperature
              bus                     : parts.bus
          serversRoomTemperature:
              isEnabled               : parts.bus.isEnabled
              unit                    : mtcs_common.Units.DEGREES_CELSIUS
              config                  : config.serversRoomTemperature
              bus                     : parts.bus
  
  ########################################################################################################################
  # ServicesChillerController
  ########################################################################################################################
  !STATEMACHINE ServicesChillerController:
      variables :
          isEnabled            : { type: t_bool , comment: "Are the processes enabled?" }
          chillerOn            : { type: t_bool, comment: "The unit status, TRUE = Chiller is ON" }
          resetAlarmRegisters  : { type: t_bool, comment: "Flag to reset all active alarms"}
          #Logical Area 3. Data. R/W. Words 16bits
          setpoint             : { type: mtcs_common.QuantityValue, comment: "The setpoint" }
          minSetpoint          : { type: mtcs_common.QuantityValue, comment: "The minimun setpoint" }
          maxSetpoint          : { type: mtcs_common.QuantityValue, comment: "The maximal setpoint" }
          trippingBand         : { type: mtcs_common.QuantityValue, comment: "The tripping band" }
          #Logical Area 4. Configuration. R/W. Words 16bits
          condensingFanCircuits : { type: mtcs_common.QuantityValue, comment: "Condensing Fan circuits" }
          condensingFanOpStatus : { type: t_bool, comment: "Condensing Fan Op status True=Single / False=Dual" }
          #Logical Area 5. Unit Status. R/W. Words 16bits
          unitStatus           : { type: mtcs_common.QuantityValue, comment: "The unit status" }
          unitResetRegister    : { type: mtcs_common.QuantityValue, comment: "The unit reset register" }
          unitStatusII         : { type: mtcs_common.QuantityValue, comment: "The unit status II" }
          #Logical Area 14. Load hours. R/W. Words 16bits
          hoursCompressor1     : { type: mtcs_common.QuantityValue, comment: "Operation hours of compressor 1" }
          hoursCompressor2     : { type: mtcs_common.QuantityValue, comment: "Operation hours of compressor 2" }
          hoursCompressor3     : { type: mtcs_common.QuantityValue, comment: "Operation hours of compressor 3" }
          hoursCompressor4     : { type: mtcs_common.QuantityValue, comment: "Operation hours of compressor 4" }
          hoursPump            : { type: mtcs_common.QuantityValue, comment: "Operation hours of water pump" }
              
      variables_read_only:
          invalidData          : { type: t_bool                 , comment: "True if there is invalid data"}
          #Logical Area 1. Analog input. Read only. Words 16bits
          waterTankTemperature : { type: mtcs_common.QuantityValue, comment: "Water tank temperature" }
          highPressureCircuit1 : { type: mtcs_common.QuantityValue, comment: "High pressure of circuit 1" }
          highPressureCircuit2 : { type: mtcs_common.QuantityValue, comment: "High pressure of circuit 2" }
          chillerCurrentInput  : { type: mtcs_common.QuantityValue, comment: "Chiller current input" }
          waterPumpCurrentInput: { type: mtcs_common.QuantityValue, comment: "Water pump current input" }
          evaporatorOutTemp1   : { type: mtcs_common.QuantityValue, comment: "Evaporator out temperature 1" }
          evaporatorOutTemp2   : { type: mtcs_common.QuantityValue, comment: "EvaporwaterTankTemperatureMeasurementator out temperature 2" }
          ambientTemperature   : { type: mtcs_common.QuantityValue, comment: "Ambient temperature" }
          waterPumpChassisTemp : { type: mtcs_common.QuantityValue, comment: "Water Pump chassis temperature" }
          #Logical Area 2. Digital input. Read only. Words 16bits
          flowSwitchStatus     : { type: t_bool, comment: "Flow switch status. Digital Input Status 1" }
          digitalInputStatus2  : { type: t_bool, comment: "Digital input status 2" }
          digitalInputStatus3  : { type: t_bool, comment: "Digital input status 3" }
          digitalInputStatus4  : { type: t_bool, comment: "Digital input status 4" }
          circ1CondFanOverStatus : { type: t_bool, comment: "Circ1 condensing fan overload. Digital input status 15" }
          circ2CondFanOverStatus : { type: t_bool, comment: "Circ2 condensing fan overload. Digital input status 16" }
          condFanComOverStatus   : { type: t_bool, comment: "Condensing fan common overload. Digital input status 17" }
          #Logical Area 5. Unit Status II. Words 16bits
          circuit1Disabled      : { type: t_bool, comment: "Circuit 1 disabled" }
          circuit2Disabled      : { type: t_bool, comment: "Circuit 2 disabled" }
          compressor1Disabled   : { type: t_bool, comment: "Compressor 1 disabled" }
          compressor2Disabled   : { type: t_bool, comment: "Compressor 2 disabled" }
          compressor3Disabled   : { type: t_bool, comment: "Compressor 3 disabled" }
          compressor4Disabled   : { type: t_bool, comment: "Compressor 4 disabled" }
          #Logical Area 8. Digital output status. Read only. Words 16bits
          alarmRelayOutput     : { type: t_bool, comment: "Alarm output relay output status 1" }
          waterPumpRelayOutput : { type: t_bool, comment: "Water pump output relay output status 1" }
          relayOutputStatus2   : { type: t_bool, comment: "Relay output status 2" }
          relayOutputStatus3   : { type: t_bool, comment: "Relay output status 3" }
          compressorStatus1    : { type: t_bool, comment: "Compressor 1 status. ON/OFF" }
          compressorStatus2    : { type: t_bool, comment: "Compressor 2 status. ON/OFF" }
          compressorStatus3    : { type: t_bool, comment: "Compressor 3 status. ON/OFF" }
          compressorStatus4    : { type: t_bool, comment: "Compressor 4 status. ON/OFF" }
          #Logical Area 9. Analog output status. Read only. Words 16bits
          fanCondenser1Output  : { type: mtcs_common.QuantityValue, comment: "Fan condenser 1 analog output 1" }
          fanCondenser2Output  : { type: mtcs_common.QuantityValue, comment: "Fan condenser 2 analog output 2" }
          #Logical Area 13. Alarm status. Read only. Words 16bits
          alarmStatus1         : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus2         : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus3         : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus6         : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus7         : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus10        : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          alarmStatus11        : { type: mtcs_common.QuantityValue, comment: "Alarms bitwise register" }
          #Logical Area 15. Alarms per hour. Read only. Words 16bits
          alarmOilCompressor1  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Oil Compressor 1" }
          alarmOilCompressor2  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Oil Compressor 2" }
          alarmOilCompressor3  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Oil Compressor 3" }
          alarmOilCompressor4  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Oil Compressedor 4" }
          alarmFanOverload     : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Fan overload" }
          alarmColdSideFlowSwitch   : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. ColdSideFlowSwitch" }
          alarmHotSideFlowSwitch    : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. HotSideFlowSwitch " }
          alarmCirc1LowTempPressDI  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Circ1LowTempPressDI" }
          alarmCirc2LowTempPressDI  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Circ1LowTempPressPB" }
          alarmCirc1LowTempPressPB  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Circ1LowTempPressPB" }
          alarmCirc2LowTempPressPB  : { type: mtcs_common.QuantityValue, comment: "Alarms per hour. Circ2LowTempPressPB" }
      references:
          config           : { type: ServicesChillerControllerConfig, comment: "A small config only for Chiller controller" }
          bus              : { type: mtcs_common.ModbusRTUBus, comment: "The shared Modbus RTU bus" }
      processes:
          updateConfigVariables     : { type: mtcs_common.Process, comment: "Read the Config variables"}
          updateMeasureVariables    : { type: mtcs_common.Process, comment: "Read the Measurement variables"}
          updateAlarmRegisters      : { type: mtcs_common.Process, comment: "Read the Alarm registers"}
          writeSetpoint             : { type: mtcs_common.ChangeSetpointProcess, comment: "Write the setpoint"}
          switchChillerON           : { type: mtcs_common.Process, comment: "Switch ON the Chiller"}
          switchChillerOFF          : { type: mtcs_common.Process, comment: "Switch OFF the Chiller"}
          resetUnitController       : { type: mtcs_common.Process, comment: "Reset Unit controller of the Chiller"}
          resetAlarms               : { type: mtcs_common.Process, comment: "Reset all activated alarms"}
          disableCircuit1           : { type: mtcs_common.Process, comment: "Disable the Circuit 1"}
          disableCircuit2           : { type: mtcs_common.Process, comment: "Disable the Circuit 2"}
          enableCircuit1            : { type: mtcs_common.Process, comment: "Enable the Circuit 1"}
          enableCircuit2            : { type: mtcs_common.Process, comment: "Enable the Circuit 2"}
          disableCompressor1        : { type: mtcs_common.Process, comment: "Disable the Compressor 1"}
          disableCompressor2        : { type: mtcs_common.Process, comment: "Disable the Compressor 2"}
          disableCompressor3        : { type: mtcs_common.Process, comment: "Disable the Compressor 3"}
          disableCompressor4        : { type: mtcs_common.Process, comment: "Disable the Compressor 4"}
          enableCompressor1         : { type: mtcs_common.Process, comment: "Enable the Compressor 1"}
          enableCompressor2         : { type: mtcs_common.Process, comment: "Enable the Compressor 2"}
          enableCompressor3         : { type: mtcs_common.Process, comment: "Enable the Compressor 3"}
          enableCompressor4         : { type: mtcs_common.Process, comment: "Enable the Compressor 4"}
          setCondFansSingleOp       : { type: mtcs_common.Process, comment: "Set Condensing Fans to Single operation"}
          setCondFansDualOp         : { type: mtcs_common.Process, comment: "Set Condensing Fans to Dual operation"}
      statuses:
          healthStatus                      : { type: mtcs_common.HealthStatus        , comment: "Is the data valid and within range?" }
          alarmStatusWatertemperature       : { type: mtcs_common.HiHiLoLoAlarmStatus , comment: "Alarm status about Water temperature"}
          alarmStatusWaterPumpSupervisor    : { type: mtcs_common.HiHiLoLoAlarmStatus , comment: "Alarm status about WaterPump supervisor"}
      calls:
          alarmStatusWatertemperature:
              superState   : config.waterTankTemperatureMeasurement.enabled
              config       : config.waterTankTemperatureMeasurement.alarms
              value        : waterTankTemperature.value
          alarmStatusWaterPumpSupervisor:
              superState   : config.waterPumpSupervisorMeasurement.enabled           
              config       : config.waterPumpSupervisorMeasurement.alarms
              value        : waterPumpCurrentInput.value
          healthStatus:
              superState   : !AND [ config.waterTankTemperatureMeasurement.enabled,
                                    config.waterPumpSupervisorMeasurement.enabled ]
              isGood       : !NOT [ !OR [ invalidData,
                                          alarmRelayOutput,
                                          statuses.alarmStatusWatertemperature.hiHi,
                                          statuses.alarmStatusWatertemperature.loLo,
                                          statuses.alarmStatusWaterPumpSupervisor.hiHi,
                                          statuses.alarmStatusWaterPumpSupervisor.loLo ] ]
              hasWarning   : !OR [ !NOT [ chillerOn ],
                                    flowSwitchStatus,
                                    circ1CondFanOverStatus,
                                    circ2CondFanOverStatus,
                                    circuit1Disabled,
                                    circuit2Disabled,
                                    compressor1Disabled,
                                    compressor2Disabled,
                                    compressor3Disabled,
                                    compressor4Disabled,
                                    statuses.alarmStatusWatertemperature.hi,
                                    statuses.alarmStatusWatertemperature.lo,
                                    statuses.alarmStatusWaterPumpSupervisor.hi,
                                    statuses.alarmStatusWaterPumpSupervisor.lo ]

          updateConfigVariables:
              isEnabled    : isEnabled
          updateMeasureVariables:
              isEnabled    : isEnabled
          updateAlarmRegisters:
              isEnabled    : isEnabled
          writeSetpoint:
              isEnabled    : isEnabled
          switchChillerON:
              isEnabled    : isEnabled
          switchChillerOFF:
              isEnabled    : isEnabled
          resetAlarms:
              isEnabled    : isEnabled
          resetUnitController:
              isEnabled    : isEnabled
          disableCircuit1:
              isEnabled    : isEnabled
          disableCircuit2:
              isEnabled    : isEnabled
          enableCircuit1:
              isEnabled    : isEnabled
          enableCircuit2:
              isEnabled    : isEnabled
          disableCompressor1:
              isEnabled    : isEnabled
          disableCompressor2:
              isEnabled    : isEnabled
          disableCompressor3:
              isEnabled    : isEnabled
          disableCompressor4:
              isEnabled    : isEnabled
          enableCompressor1:
              isEnabled    : isEnabled
          enableCompressor2:
              isEnabled    : isEnabled
          enableCompressor3:
              isEnabled    : isEnabled
          enableCompressor4:
              isEnabled    : isEnabled
          setCondFansSingleOp:
              isEnabled    : isEnabled
          setCondFansDualOp:
              isEnabled    : isEnabled 
  
  ########################################################################################################################
  # ServicesChiller
  ########################################################################################################################
  !STATEMACHINE ServicesChiller:
      typeOf                          : [ ServicesParts.chiller ]
      variables:
          {}
      references:
          operatorStatus              : { type: mtcs_common.OperatorStatus      , comment: "Shared operator status" }
          config                      : { type: ServicesChillerConfig           , comment: "The config" }
          airTemperature              : { type: ServicesMeteoMeasurement        , comment: "Air temperature" }
      statuses:
          healthStatus                : { type: mtcs_common.HealthStatus        , comment: "Is the Chiller in healthy state (good) or not (bad)" }
          operatingStatus             : { type: mtcs_common.OperatingStatus     , comment: "Is the Chiller being polled (auto) or not (manual)?" }
      parts:
          bus                         : { type: mtcs_common.ModbusRTUBus        , comment: "The shared Modbus RTU bus" }
          chillerMainController       : { type: ServicesChillerController       , comment: "The Chiller controller to control the water temperature" }
      processes:
          changeOperatingState        : { type: mtcs_common.ChangeOperatingStateProcess   , comment: "Change the operating state (e.g. AUTO, MANUAL, ...)" }
      calls:
          operatingStatus:
              {}
          changeOperatingState:
              isEnabled               : operatorStatus.tech
          healthStatus:
              isGood                  : parts.chillerMainController.statuses.healthStatus.isGood
              hasWarning              : parts.chillerMainController.statuses.healthStatus.hasWarning
          bus:
              isEnabled               : !AND [ operatorStatus.tech, statuses.operatingStatus.manual ]
          chillerMainController:
              isEnabled               : parts.bus.isEnabled
              config                  : config.chillerMainController
              bus                     : parts.bus
  
  ########################################################################################################################
  # ServicesIO
  ########################################################################################################################
  
  !STATEMACHINE ServicesIO:
      typeOf              : [ ServicesParts.io ]
      statuses:
          healthStatus    : { type: mtcs_common.HealthStatus   , comment: "Is the I/O in a healthy state?"  }
      parts:
          coupler         : { type: mtcs_common.EtherCatDevice , comment: "Coupler" }
          slot1           : { type: mtcs_common.EtherCatDevice , comment: "Slot 1" }
          slot2           : { type: mtcs_common.EtherCatDevice , comment: "Slot 2" }
          slot3           : { type: mtcs_common.EtherCatDevice , comment: "Slot 3" }
          slot4           : { type: mtcs_common.EtherCatDevice , comment: "Slot 4" }
      calls:
          coupler:
              id          : !STRING "COUPLER"
              typeId      : !STRING "EK1100"
          slot1:
              id          : !STRING "TI-RS232"
              typeId      : !STRING "EL6001"
          slot2:
              id          : !STRING "METEO"
              typeId      : !STRING "EL6001"
          slot3:
              id          : !STRING "WESTS"
              typeId      : !STRING "EL6001"
          slot4:
              id          : !STRING "TI-PTP"
              typeId      : !STRING "EL6688"
          healthStatus:
              isGood      : !MTCS_SUMMARIZE_GOOD [  parts.coupler,
                                                    parts.slot1,
                                                    parts.slot2,
                                                    parts.slot3,
                                                    parts.slot4 ]
  
  